generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider            = "prisma-dbml-generator"
  output              = "./"
  outputName          = "schema.dbml"
  projectDatabaseType = "MySQL"
  projectName         = "Airbnb Clone"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user_credentials {
  id            Bytes                   @id @db.Binary(16)
  email         String                  @unique(map: "email") @db.VarChar(255)
  username      String                  @unique(map: "username") @db.VarChar(50)
  password_hash String                  @db.VarChar(255)
  status        user_credentials_status @default(pending)
  role          user_credentials_role   @default(user)
  verified_at   DateTime?               @db.Timestamp(0)
  created_at    DateTime                @default(now()) @db.Timestamp(0)
  updated_at    DateTime                @default(now()) @db.Timestamp(0)
  user_profiles user_profiles?

  @@index([email], map: "idx_user_credentials_email")
  @@index([role], map: "idx_user_credentials_role")
  @@index([username], map: "idx_user_credentials_username")
  @@index([status], map: "idx_user_credentials_status")
}

model user_profiles {
  id                  Int                  @id @default(autoincrement())
  first_name          String?              @db.VarChar(100)
  last_name           String?              @db.VarChar(100)
  phone_number        String?              @unique(map: "phone_number") @db.VarChar(50)
  avatar              String?              @db.VarChar(512)
  date_of_birth       DateTime?            @db.Date
  bio                 String?              @db.Text
  gender              user_profiles_gender @default(not_provide)
  timezone            String?              @db.VarChar(50)
  language            String?              @db.VarChar(10)
  created_at          DateTime             @default(now()) @db.Timestamp(0)
  updated_at          DateTime             @default(now()) @db.Timestamp(0)
  user_credentials_id Bytes                @unique(map: "user_credentials_id") @db.Binary(16)
  user_credentials    user_credentials     @relation(fields: [user_credentials_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_profiles_ibfk_1")

  @@index([phone_number], map: "idx_user_profiles_phone_number")
  @@index([user_credentials_id], map: "idx_user_profiles_user_credentials_id")
}

enum user_profiles_gender {
  male
  female
  other
  not_provide
}

enum user_credentials_role {
  user
  host
  moderator
  admin
}

enum user_credentials_status {
  pending
  active
  inactive
  deleted
}
